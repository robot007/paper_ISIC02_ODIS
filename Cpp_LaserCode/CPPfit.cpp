
#define WANT_STREAM                  // include.h will get stream fns
#define WANT_MATH                    // include.h will get math fns
                                     // newmatap.h will get include.h

#include "newmatap.h"                // need matrix applications
#include "newmatio.h"                // need matrix output routines

#ifdef use_namespace
using namespace NEWMAT;              // access NEWMAT namespace
#endif

#include <iomanip.h>
#include "Fits.h"


//*******************************************
//	CPPfit.cpp
//	main( ) ver 1.0
//This function is designed to test and demo circle/ellipse fit functions
//
//	Zhen Song Aug 8, 2001
//	zhensong@cc.usu.edu
// check http://cc.usu.edu/~zhensong/fits/fitbrief.zip for latest version
//*******************************************
main ( )
{
	
	Real lf[]={1,2,3,4}, rt[]={ 5,6};
	Matrix Lf(2,2),Rt(2,1),Ans;
	mldivide(Ans,Lf,Rt);
	cout<<Ans;





/*
	Real a[]={ 
	1.1161 ,   0.1735,
    1.0357 ,   0.1528,
    1.0357 ,   0.1528,
    1.0105 ,   0.1464,
    1.0105 ,   0.1464,
    0.9972 ,   0.1050,
    0.9972 ,   0.1050,
    0.9854 ,   0.1025,
    0.9854 ,   0.1025,
    0.9854 ,   0.1025,
    0.9883 ,   0.0661,
    0.9883 ,   0.0661,
    0.9745 ,   0.0636,
    0.9745 ,   0.0636,
    0.9705 ,   0.0629,
    0.9719 ,   0.0243,
    0.9700 ,   0.0240,
    0.9700 ,   0.0240,
    0.9700 ,   0.0240,
    0.9700 ,   0.0240,
    0.9710 ,  -0.0109,
    0.9710 ,  -0.0109,
    0.9710 ,  -0.0109,
    0.9710 ,  -0.0109,
    0.9710 ,  -0.0109,
    0.9756 ,  -0.0455,
    0.9756 ,  -0.0455,
    0.9816 ,  -0.0451,
    0.9816 ,  -0.0451,
    0.9896 ,  -0.0446,
    0.9872 ,  -0.0797,
    0.9982 ,  -0.0794,
    0.9982 ,  -0.0794,
    0.9982 ,  -0.0794,
    0.9982 ,  -0.0794,
    0.9946 ,  -0.1144,
    1.0286 ,  -0.1145,
    1.0286 ,  -0.1145,
    1.0456 ,  -0.1145,
    1.0456 ,  -0.1145,
    1.1797 ,  -0.1572};

	Matrix X(41,2);	
	X<<a;
*/
	Real a[]={
1.37793, -0.1741,
1.37693, -0.174048,
1.37693, -0.174048,
1.37394, -0.173894,
1.37394, -0.173894,
1.36879, -0.168504,
1.36879, -0.168504,
1.36879, -0.168504,
1.36879, -0.168504,
1.34282, -0.167272,
1.33619, -0.145409,
1.33619, -0.145409,
1.3212, -0.144932,
1.3212, -0.144932,
1.3212, -0.144932,
1.3212, -0.144932,
1.32373, -0.118469,
1.30073, -0.118202,
1.30073, -0.118202,
1.29273, -0.118108,
1.29273, -0.118108,
1.28896, -0.104033,
1.28896, -0.104033,
1.28896, -0.104033,
1.28896, -0.104033,
1.28696, -0.104031,
1.28763, -0.0992762,
1.28763, -0.0992762,
1.28463, -0.0992856,
1.28463, -0.0992856,
1.27963, -0.0993011,
1.28081, -0.0776927,
1.28081, -0.0776927,
1.28081, -0.0776927,
1.27281, -0.0778508,
1.27081, -0.0778903,
1.27081, -0.0778903,
1.26806, -0.053883,
1.26806, -0.053883,
1.26506, -0.0539992,
1.26506, -0.0539992,
1.26506, -0.0539992,
1.26531, -0.0470561,
1.26431, -0.0471006,
1.26431, -0.0471006,
1.26431, -0.0471006,
1.26331, -0.0471452,
1.2639 ,-0.0336568,
1.2639, -0.0336568,
1.2639, -0.0336568,
1.2639, -0.0336568,
1.26191, -0.033767,
1.2621, -0.00804086,
1.2611, -0.00811598,
1.2611, -0.00811598,
1.2621, -0.00804086,
1.2621, -0.00804086,
1.2621, -0.00804086,
1.26209, 0.00785016,
1.26309, 0.00793794,
1.26309, 0.00793794,
1.26309, 0.00793794,
1.26309, 0.00793794,
1.26319, 0.0144095,
1.26419, 0.0145028,
1.26419, 0.0145028,
1.26419, 0.0145028,
1.26419, 0.0145028,
1.26758, 0.0361157,
1.26857, 0.0362251,
1.26857, 0.0362251,
1.27255, 0.036663,
1.27255, 0.036663,
1.27665, 0.0594567,
1.27665, 0.0594567,
1.27665, 0.0594567,
1.27665, 0.0594567,
1.28161, 0.0600912,
1.28238, 0.065064,
1.28238, 0.065064,
1.28337, 0.0651948,
1.28337, 0.0651948,
1.28635, 0.0655873,
1.28635, 0.0655873,
1.28547, 0.0825186,
1.2924, 0.0835252,
1.2924, 0.0835252,
1.30031, 0.0846757,
1.30031, 0.0846757,
1.30929, 0.109785,
1.30929, 0.109785,
1.30929, 0.109785,
1.30929, 0.109785,
1.33199, 0.113496,
1.33662, 0.128546,
1.33662, 0.128546,
1.34253, 0.129577,
1.34253, 0.129577,
1.34942, 0.13078,
1.34942, 0.13078,
1.34881, 0.138475,
1.34881, 0.138475};
//1.91464, 0.240758};

	Matrix X(102,2);	
	X<<a;
	circle Cir;

	double Rad=0;
	AlgCircle(X, Cir);
	
	cout<<setiosflags(ios::fixed | ios::showpoint  )<<setprecision(80);

	cout<<"for Cir10"<<endl;
	cout<<"("<<Cir.x0<<","<<Cir.y0<<")"<<endl;
	cout<<"r="<<Cir.r<<endl;
	cout<<"err="<<Cir.err<<endl;
	
/*
	Real b[]={
	1.4988,    0.2138,
    1.3375,    0.1787,
    1.3427,    0.1314,
    1.3181,    0.1269,
    1.3181,    0.1269,
    1.3023,    0.1241,
    1.3023,    0.1241,
    1.2937,    0.0757,
    1.2937,    0.0757,
    1.2937,    0.0757,
    1.2937,    0.0757,
    1.2937,    0.0757,
    1.2843,    0.0274,
    1.2843,    0.0274,
    1.2823,    0.0272,
    1.2823,    0.0272,
    1.2863,    0.0276,
    1.2860,   -0.0249,
    1.2900,   -0.0247,
    1.2900,   -0.0247,
    1.2900,   -0.0247,
    1.2900,   -0.0247,
    1.2880,   -0.0724,
    1.3070,   -0.0719,
    1.3070,   -0.0719,
    1.3240,   -0.0713,
    1.3240,   -0.0713,
    1.3490 ,  -0.0706,
    1.3453 ,  -0.1193,
    1.3713,   -0.1194,
    1.3713,   -0.1194,
    1.3713,   -0.1194,
    1.3713,   -0.1194,
    1.3661,   -0.1680,
    1.6289,   -0.1788,
	};

	X.ReleaseAndDelete ( );
	X.ReSize (35,2);

	X<<b;
	AlgCircle(X, Cir );
	cout<<"for case B"<<endl;
	cout<<"("<<Cir.x0<<","<<Cir.y0<<")"<<endl;
	cout<<"r="<<Cir.r<<endl;
	cout<<"err="<<Cir.err <<endl;



	Cir.r=0.3345/2;
	X<<a;
	KrCircle(X, Cir);
	cout<<setiosflags(ios::fixed )<<setprecision(20);
	cout<<"KrCircle"<<endl;
	cout<<"("<<Cir.x0<<","<<Cir.y0<<")"<<endl;
	cout<<"assume r="<<Cir.r<<endl;
	cout<<"error="<<Cir.err<<endl;
*/


/*	Real ellip[]={//x y  data for ellipse fitting
   1.00783064866979,  10.51521593637447,
   0.88260216006244,   9.81717108381502,
   2.17133359051833,   9.45476233497936,
   1.74886409768209,   9.49113349742384,
   2.99052061743860,   7.92536975187541,
   2.21999753668897,   7.20980560372600,
   3.55671346328313,   5.61193977526187,
   4.49886843458959,   4.36010407809210,
   4.33153244702132,   3.83566035872867,
   5.49721597243692,   3.25869823686346,
   4.53266845960836,   1.54908754790753,
   3.59500696481110,  -0.17221324254870,
   4.25115172214635,   0.01570656544095,
   5.54482528638492,  -2.30106441735386,
   4.68734818785435,  -3.09694128048788,
   4.75166943594112,  -4.25828313316814,
   4.78815946355846,  -5.50792972060723,
   2.58031020094442,  -6.13629470625991,
   3.03592818031828,  -7.44809428716746,
   2.51634522440220,  -9.08857646990783,
   1.79788604066913,  -9.38045186016492,
   1.73137364237656,  -9.15190803874777,
   2.15605737922763, -10.43978567598660,
   0.60360290948950, -10.12945692698489,
   0.73646879340583, -10.56482331605700,
  -1.04438904784125, -10.62588318192625,
  -1.23893474391046, -10.29851662344778,
  -2.31035859005036,  -9.53876489964059,
  -2.05660523497992,  -8.65886739930125,
  -3.08965068620369,  -8.15984103975978,
  -3.13465403593788,  -6.65121478482231,
  -3.45167319321876,  -6.52147167553790,
  -4.26863234527412,  -6.26879142844370,
  -3.99063169128254,  -4.25195242017515,
  -3.36971008990434,  -3.04734622483590,
  -4.59665304578078,  -1.68389165759614,
  -4.99720603651214,  -0.32800979461524,
  -4.44224915148454,   1.39475568332159,
  -4.87787184631040,   1.54512345770455,
  -5.41952451837137,   3.24665498307692,
  -4.23283663794241,   4.24988691252661,
  -4.22464267176339,   5.01010954850480,
  -4.01829692949180,   7.65602495117008,
  -2.65686404543881,   7.13511600482202,
  -1.82088589355164,   7.24445285012795,
  -2.72230395149042,   9.82512733614960,
  -1.77856809526100,   9.49309244973894,
  -1.72803891436258,   9.01440786605752,
  -0.21840301757216,  10.29335709681209,
  -1.41875390876495,  10.76186910831387,
	};
*/
/*
	Real ellip[]={//x y  data for ellipse fitting
  -0.08600004206036,   9.84922535631035,
  -0.07794299456979,   9.64665520238136,
   2.43242519802460,   9.58894219243244,
   2.09758733070173,   8.40577225886695,
   3.13534679991087,   8.00036929745479,
   3.56316973735175,   7.02883511552260,
   3.86544589720640,   6.32664176367285,
   3.61927294746144,   6.27935930946325,
   3.95584762348697,   3.89390320008437,
   4.53062506445827,   2.28175233943933,
   4.19990452535833,   2.15544301777705,
   4.35659188802714,   0.08576502972247,
   5.87362160279331,  -0.60637741205545,
   4.94488255274615 , -2.25033187783735,
   4.02489210925304 , -2.76893117120001,
   4.49939898211824 , -3.92606280519643,
   3.54463330891794,  -5.48048223753038,
   3.04299968801745,  -7.60683470582086,
   3.26607455580647,  -7.21014983536375,
   3.51100552876526,  -7.13440552148986,
   2.48595502853656,  -8.15201972726381,
   2.23450327175463, -10.24600635846441,
   0.54275781698829,  -9.73302876290198,
   0.35030306011783, -10.33014112914620,
  -0.15746397170300, -10.61473183445742,
  -1.35455740891787, -10.66175909993534,
  -2.03511163469000,  -9.51254740004811,
  -1.28189225442613,  -9.55534666161366,
  -2.40202143267810,  -8.72958608633275,
  -3.32601375087707,  -8.31089408379386,
  -2.93929825377602,  -7.56867029451679,
  -3.71359060741068,  -6.15166354717752,
  -4.81549543051928,  -4.92129819085907,
  -3.72038384196387,  -2.99049681378782,
  -4.58158136075272,  -3.90454858960753,
  -4.02408601903468,  -2.48737923245777,
  -4.30731683442634,  -0.00520467606188,
  -5.40061679322316,   0.39402546620703,
  -5.68659788062301,   1.04505377144534,
  -4.79903834723396,   3.27949552341289,
  -4.72249459026576,   5.18973845675993,
  -4.72781621100295,   5.78300428056945,
  -3.55390441536928,   7.54867075057540,
  -2.52964124710135,   7.59241168636941,
  -3.26681179832294,   9.20888735604066,
  -2.91682326883842,   8.55917973398965,
  -1.98842468027433,   8.61389721749457,
  -0.84563494831073,   9.55915752125815,
  -1.13918459250291,  10.63529397489550,
  -0.72078888920343,   9.33027474532863,
	};

	int Row=sizeof(ellip)/sizeof(Real)/2;

	Matrix El(Row,2);
	El<<ellip;
	ellipse el;
	Try{
		FitEllipse(El, el);
	}
	CatchAll{
		cout<<Exception::what( )<<endl;
	}
	
	cout<<setiosflags(ios::fixed)<<setprecision(20);
	cout<<"FitEllipse"<<endl;
	cout<<el.Cx2<<" X2 "<<el.Cxy<<" XY "<<el.Cy2<<" Y2 "<<el.Cx<<" X "<<el.Cy<<" Y "
		<<el.C<<" =0"<<endl;
	cout<<"error="<<el.err<<endl;
	cout<<"("<<el.x0<<", "<<el.y0<<"), rx="<<el.rx<<" ry="<<el.ry<<" theta="<<
		el.theta<<endl;

*/
	return 0;

}


	
	